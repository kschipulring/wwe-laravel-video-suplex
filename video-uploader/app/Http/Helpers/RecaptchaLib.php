<?php
use Illuminate\Http\Request;

/*
 * This is a PHP library that handles calling reCAPTCHA.
 *    - Documentation and latest version
 *          http://recaptcha.net/plugins/php/
 *    - Get a reCAPTCHA API Key
 *          https://www.google.com/recaptcha/admin/create
 *    - Discussion group
 *          http://groups.google.com/group/recaptcha
 *
 * Copyright (c) 2007 reCAPTCHA -- http://recaptcha.net
 * AUTHORS:
 *   Mike Crawford
 *   Ben Maurer
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * The reCAPTCHA server URL's
 */

class RecaptchaLib{
	/*
	const RECAPTCHA_API_SERVER = "http://www.google.com/recaptcha/api";
	const RECAPTCHA_API_SECURE_SERVER = "https://www.google.com/recaptcha/api";
	const RECAPTCHA_VERIFY_SERVER = "www.google.com";*/

	//urls
	protected $RECAPTCHA_MASTER = "";
	protected $RECAPTCHA_VERIFY = "";

	//have to use your own from google.  Place it in your server specific .env files
	protected $RECAPTCHA_PRIVATE_KEY = "";


	/**
	* 
	* @var Singleton
	*/
	private static $instance;

	private function __construct(){
		$this->RECAPTCHA_MASTER = env("RECAPTCHA_MASTER");
		$this->RECAPTCHA_VERIFY = env("RECAPTCHA_VERIFY");

		$this->RECAPTCHA_PRIVATE_KEY = env("RECAPTCHA_PRIVATE_KEY");
	}

	/**
	 * Encodes the given data into a query string format
	 * @return object RecaptchaLib (instance) - has core vars
	 */
	public static function getConfig(){
		if ( is_null( self::$instance ) ){
			self::$instance = new self();
		}

		return self::$instance;
	}


	/**
	 * Encodes the given data into a query string format
	 * @param $e - string, which html element (by id) to place before.  Typically a submit button.
	 * @param $f - string, needs to be the id attribute of a form that the recaptcha widget shows up on.
	 * @return View
	 */
	public static function frontEndRender($e, $f, $errors=null){

		//render a recaptcha instance if the .env setting is on
		if( !empty(env("RECAPTCHA_ON")) && env("RECAPTCHA_ON") == 1 ){
			$main_view = view('partials.recaptcha-frontend', ['e' => $e, 'f' => $f, 'errors' => $errors]);

			return $main_view;
		}else{
			return null;
		}
	}


	/**
	 * Encodes the given data into a query string format
	 * @param $data - string, generated by the recaptcha widget itself.
	 * @return object - success key and possible error-codes key that is an array
	 */
	public static function validate($g_recaptcha_response){
		/*
		this key is loaded from a server specific .env file,
		rather than the global one.  This is for security reasons.
		*/
		$privatekey = self::getConfig()->RECAPTCHA_PRIVATE_KEY;

		$url = self::getConfig()->RECAPTCHA_VERIFY;

		$fields = array(
			'secret' => $privatekey,
			'response' => $g_recaptcha_response
		);


		$fields_string = "";

		//url-ify the data for the POST
		foreach($fields as $key=>$value) { $fields_string .= $key.'='.$value.'&'; }
		rtrim($fields_string, '&');

		//open connection
		$ch = curl_init();

		//set the url, number of POST vars, POST data
		curl_setopt($ch,CURLOPT_URL, $url);
		curl_setopt($ch,CURLOPT_POST, count($fields));
		curl_setopt($ch,CURLOPT_POSTFIELDS, $fields_string);
		curl_setopt($ch,CURLOPT_RETURNTRANSFER, true);


		//execute post
		$result = curl_exec($ch);

		//close connection
		curl_close($ch);

		//turn response into object
		$curl_result_obj = json_decode( $result, true );

		return $curl_result_obj;
	}


	/**
	 * Encodes the given data into a query string format
	 * @param $request - Request (object).
	 * @param $errors -  array.
	 * @return void
	 */
	public function sendFailedRecaptchaResponse(Request $request, $errors){
		$errors = ["recaptcha" => "recaptcha failed, because: " . implode(",", $errors) ];

		if ($request->expectsJson()) {
			return response()->json($errors, 422);
		}

		return redirect()->back()
		->withInput($request->only($this->username(), 'remember'))
		->withErrors($errors);
	}
}
